// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Fundraising {
    address public owner;
    uint256 public goal;
    uint256 public totalContribution;
    bool public goalReached;
    mapping(address => uint256) public contributions;

    constructor(uint256 _goal) {
        require(_goal > 0, "Goal must be greater than zero");
        owner = msg.sender;
        goal = _goal;
        totalContribution = 0;
        goalReached = false;
    }

    function contribute(address _contributor, uint256 _amount) public {
        require(_amount > 0, "Contribution must be greater than zero");

        contributions[_contributor] += _amount;
        totalContribution += _amount;

        if (totalContribution >= goal && !goalReached) {
            goalReached = true;
        }
    }

    function amountNeededToReachGoal() public view returns (uint256) {
        if (goalReached) {
            revert("Goal already reached");
        }
        return goal - totalContribution;
    }

    function hasExceededGoal() public view returns (bool) {
        assert(totalContribution <= goal + 10**18);
        return totalContribution > goal;
    }
}

